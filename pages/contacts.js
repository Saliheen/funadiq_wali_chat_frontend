import React, { useState, useEffect } from "react";
import Head from "next/head";
import Dropdown from "@/components/common/Dropdown";
import SearchUser from "@/components/contacts/SearchUser";
import CheckBox from "@/components/contacts/CheckBox";
import PaginationComponent from "@/components/common/PaginationComponent";
import API from "../utils/API";
import PageCountInput from "@/components/contacts/PageCountInput";
import getHeader from "@/utils/getHeader";
import ReactPaginate from "react-paginate";
import ReactDOM from "react-dom";
import Loader from "@/components/common/Loader";
import ContactsModel from "@/components/contacts/lContactsModal";
import swal from "sweetalert";
import { useRouter } from "next/router";

export default function contacts(props) {
  const router = useRouter();

  const [contactsData, setContactsData] = useState();
  const [perPageCount, setPerPageCount] = useState(10);
  const [searchKeyword, setSearchKeyword] = useState("");
  const [pageNumber, setPageNumber] = useState(0);
  const [loading, setloading] = useState(false);

  const [compaignName, setCompaignName] = useState();

  const loadConatacts = async () => {
    try {
      const header = getHeader();

      const { data } = await API.get(
        `contacts/get_conatacts?perPage=${perPageCount}&page=${pageNumber}&searchKeyword=${searchKeyword}`,
        header
      );
      setContactsData(data);
      setloading(false);
    } catch (error) {
      console.log(error);
    }
  };

  const changeContactStatus = async (id, status) => {
    setloading(true);
    try {
      const header = getHeader();
      const { data } = await API.post(
        "contacts/change_status",
        { id, status },
        header
      );
      loadConatacts();
      setloading(false);
    } catch (error) {
      console.log(error);
      setloading(false);
    }
  };

  const changeAllContactsStatus = async (status) => {
    setloading(true);
    try {
      const header = getHeader();
      const { data } = await API.post(
        "contacts/change_all_contacts_status",
        { status },
        header
      );
      loadConatacts();
    } catch (error) {
      setloading(false);
      console.log(error);
    }
  };

  const createCompaign = async () => {
    setloading(true);
    try {
      const header = getHeader();
      let payload = {
        status: "PENDING",
        name: compaignName,
      };
      const { data } = await API.post(
        "compaign/create_compaign",
        payload,
        header
      );
      console.log(data);
      setloading(false);
      if (data?.msgErr) {
        swal(data?.msgErr);
      } else if (data?.message) {
        swal(data?.message);
        router.push("/");
      }
    } catch (error) {
      console.log(error);
      setloading(false);
    }
  };

  useEffect(() => {
    loadConatacts();
  }, [perPageCount, searchKeyword, pageNumber]);

  return (
    <>
       <Head>
        <title>Funadiq</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head> 
      <div className="h-full max-h-screen flex flex-col  p-[40px] overflow-y-auto  ">
        <div className="flex-1 self-stretch border-[2px] border-[#838383] border-dashed  rounded-lg relative">
          <div className="flex flex-row justify-between items-center px-[40px] pt-[40px] ">
            <div className="flex flex-row items-center gap-4">
              <h1 className="text-[#626FC1]  text-2xl font-medium">{`Contacts(${contactsData?.count})`}</h1>
              <h1 className="text-[#626FC1]  text-2xl font-medium">{`Selected(${contactsData?.selectedCount})`}</h1>
            </div>

            <div className="relative flex flex-row items-center space-x-[12px]">
              {/* <Dropdown /> */}
              <PageCountInput
                count={perPageCount}
                callBack={(c) => setPerPageCount(c)}
              />
              <SearchUser
                callBack={(text) => {
                  setPageNumber(0);
                  setSearchKeyword(text);
                }}
              />
            </div>
          </div>

          <div
            className=" mx-[40px] py-[20px]  relative my-[20px] "
            style={{
              border: "1.5px dashed #838383",
              "border-radius": "10px",
            }}
          >
            {/* Table start */}
            <table className="table-fixed w-full">
              <thead>
                <tr>
                  <th className="pl-[20px] pb-[20px] border-b  border-dashed border-[#838383] w-[100px] ">
                    <CheckBox
                      isSelected={contactsData?.allSelectionStatus}
                      callBack={() =>
                        changeAllContactsStatus(
                          !contactsData?.allSelectionStatus
                        )
                      }
                    />
                  </th>
                  <th className="table_th w-[150px] ">Sr.No</th>
                  <th className="table_th ">Name</th>
                  <th className="table_th ">Mobile</th>
                  <th className="table_th ">Action</th>
                </tr>
              </thead>
              <tbody>
                {Array.isArray(contactsData?.data) &&
                  contactsData?.data.map((item, index) => {
                    return (
                      <tr key={index + ""}>
                        <td className="pl-[20px]  py-[20px]  border-t  border-dashed border-[#838383] ">
                          <CheckBox
                            isSelected={item?.selected}
                            callBack={() => {
                              changeContactStatus(item?._id, !item?.selected);
                            }}
                          />
                        </td>
                        <td className="table_td">
                          {perPageCount * (pageNumber + 1 - 1) + 1 + index}
                        </td>
                        <td className="table_td">{item?.full_name}</td>
                        <td className="table_td">{item?.phoneNumber}</td>
                        <td className=" py-[20px]  border-t  border-dashed border-[#838383]">
                          <div className="w-[140px] py-[5px] cursor-pointer rounded-lg text-center text-white font-semibold font-reem-kufi text-base bg-[#40B98B]">
                            <h1>Fetch Contacts</h1>
                          </div>
                        </td>
                      </tr>
                    );
                  })}
              </tbody>
            </table>
            {/* Table end */}
          </div>
          <div className="mx-[40px] mb-[20px]">
            <ReactPaginate
              className="flex flex-row gap-3 items-center"
              pageClassName="h-[44px] w-[44px] cursor-pointer flex items-center justify-center border border-[#838383] rounded-lg border-dashed "
              activeLinkClassName="h-[44px] w-[44px] cursor-pointer flex items-center justify-center border border-[#67A6D7] rounded-lg border-dashed text-[#67A6D7] "
              breakLabel="..."
              nextLabel="next >"
              onPageChange={(data) => {
                console.log(data);
                setPageNumber(data?.selected);
              }}
              pageRangeDisplayed={5}
              pageCount={contactsData?.pages}
              previousLabel="< prev"
              renderOnZeroPageCount={null}
            />
          </div>
        </div>
        <div>
          {contactsData?.selectedCount > 0 && (
            <ContactsModel
              callBack={(text) => setCompaignName(text)}
              value={compaignName}
              onCreate={createCompaign}
            />
          )}
        </div>
      </div>
      {loading && <Loader />}
    </>
  );
}
