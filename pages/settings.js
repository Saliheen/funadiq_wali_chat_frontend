import Head from "next/head";
import React from "react";

import Swal from 'sweetalert2'



export default function settings() {
  const DATA = new Array(3).fill(null).map(item => '12d7b13776344b43161c50ab6d28ed351254ca49fbedb19d6c5b07cef9b7e25779be99f2c9ffffa5')

  const editToken = async (tokenData) => {
    alert('Work')
    Swal.fire({
      title: 'Edit token',
      input: 'text',
      inputAttributes: {
        autocapitalize: 'off'
      },
      showCancelButton: true,
      confirmButtonText: 'Look up',
      showLoaderOnConfirm: true,
      preConfirm: (login) => {
        
      },
      allowOutsideClick: () => !Swal.isLoading()
    }).then((result) => {
      if (result.isConfirmed) {
        Swal.fire({
          title: `Token Updated successfully`
        })
      }
    })
  }

  const deleteToken = async () => {
   
    const swalWithBootstrapButtons = Swal.mixin({
      customClass: {
        confirmButton: 'p-1 bg-green-400 mr-2 rounded-md text-white',
        cancelButton: 'p-1 bg-red-400 mr-2 rounded-md text-white'
      },
      buttonsStyling: false
    })
    
    swalWithBootstrapButtons.fire({
      title: 'Are you sure?',
      text: "You won't be able to revert this!",
      icon: 'warning',
      showCancelButton: true,
      confirmButtonText: 'Yes, delete it!',
      cancelButtonText: 'No, cancel!',
      reverseButtons: true
    }).then((result) => {
      if (result.isConfirmed) {
        swalWithBootstrapButtons.fire(
          'Deleted!',
          'Token deleted successfully.',
          'success'
        )
      } else if (
        /* Read more about handling dismissals below */
        result.dismiss === Swal.DismissReason.cancel
      ) {
        swalWithBootstrapButtons.fire(
          'Cancelled',
          'Your token safe :)',
          'error'
        )
      }
    })
  }

  return (
    <>
      <Head>
        <title>Funadiq</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="w-full h-full flex p-[40px]">
        <div className="flex-1 self-stretch border-[2px] border-[#838383] border-dashed  rounded-lg flex flex-col ">
          <h1 className="text-[#626FC1] pl-[40px] pt-[40px] text-2xl font-medium">
            Settings
          </h1>
          <div className="pl-[40px] pt-[40px]">
            <div className="flex flex-col ">
              {DATA.map((item, index) => (
                <div key={index + ''}>
                  <div
                    className="p-2 mb-3 mr-4 flex flex-row"
                    style={{
                      'border': "1px solid #838383",
                      "border-radius": "10px",
                    }}>
                    <div className="flex-1">
                      <h1 className="text-gray-400">{item}</h1>
                    </div>
                    <div className="flex flex-row  space-x-4 ml-3">
                      <div className="cursor-pointer" onClick={()=>deleteToken()}>
                        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="w-6 h-6 text-red-400">
                          <path strokeLinecap="round" strokeLinejoin="round" d="M14.74 9l-.346 9m-4.788 0L9.26 9m9.968-3.21c.342.052.682.107 1.022.166m-1.022-.165L18.16 19.673a2.25 2.25 0 01-2.244 2.077H8.084a2.25 2.25 0 01-2.244-2.077L4.772 5.79m14.456 0a48.108 48.108 0 00-3.478-.397m-12 .562c.34-.059.68-.114 1.022-.165m0 0a48.11 48.11 0 013.478-.397m7.5 0v-.916c0-1.18-.91-2.164-2.09-2.201a51.964 51.964 0 00-3.32 0c-1.18.037-2.09 1.022-2.09 2.201v.916m7.5 0a48.667 48.667 0 00-7.5 0" />
                        </svg>

                      </div>
                      <div className="cursor-pointer" onClick={()=>editToken(item)}>
                        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="w-6 h-6 text-green-400">
                          <path strokeLinecap="round" strokeLinejoin="round" d="M16.862 4.487l1.687-1.688a1.875 1.875 0 112.652 2.652L10.582 16.07a4.5 4.5 0 01-1.897 1.13L6 18l.8-2.685a4.5 4.5 0 011.13-1.897l8.932-8.931zm0 0L19.5 7.125M18 14v4.75A2.25 2.25 0 0115.75 21H5.25A2.25 2.25 0 013 18.75V8.25A2.25 2.25 0 015.25 6H10" />
                        </svg>

                      </div>
                    </div>
                  </div>
                </div>
              ))}
            </div>
            <div className="hidden">
              <h1 className="font-reem-kufi font-medium text-base text-[#838383]">API Keys</h1>
              <input
                className="h-[45px] px-2 rounded-xl w-[400px] outline-none mt-2"
                placeholder="Enter API Key."
                style={{
                  'border': "1.5px dashed #838383",
                  "border-radius": "10px",
                }}
              />
            </div>
          </div>
        </div>
      </div>
    </>
  );
}
